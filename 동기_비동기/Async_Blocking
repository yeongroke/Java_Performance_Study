import coding_prac.util.Counter;

import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;

public class AsyncBlocking {
    static int count = 5;
    static class ChefA {
        boolean isFoodBFinished;

        Consumer<String> ownFood = (message) -> {
            for(int index = 0; index < count; index++) {
                Counter.slow();
                System.out.println("A: doing something.");
            }
            System.out.println("A: " + message);
        };

        Consumer<Void> callMeLater = (Void) -> {
            isFoodBFinished = true;
            System.out.println("B: Hey, Chef A. I'm Food.");
        };

        void waitWorkBFinished() {
            while(!isFoodBFinished) {
                System.out.println("A: Waiting for Chef B.");
                Counter.slow();
            }
        }

        void doMyFood() {
            ownFood.accept("I'm Chef A. And I'm done my first Food.");
            waitWorkBFinished();
            ownFood.accept("I'm Chef A. And I'm done my second Food.");
        }

        Consumer<Void> getCallMeLater() {
            return callMeLater;
        }
    }

    static class ChefB {
        Consumer<String> ownFood = (message) -> {
            for(int index = 0; index < count; index++) {
                Counter.slow();
                System.out.println("B: doing something.");
            }
            System.out.println("B: " + message);
        };

        CompletableFuture<Void> doCookAndCallToALater(Consumer<Void> callBack) {
            return CompletableFuture.runAsync(() -> {
                ownFood.accept("I'm Chef B. And I'm my first Food.");
                callBack.accept(null);
                ownFood.accept("I'm Chef B. And I'm my second Food.");
            });
        }
    }

    public static void main(String[] args) {
        ChefA a = new ChefA();
        ChefB b = new ChefB();
        CompletableFuture<Void> joinPoint = b.doCookAndCallToALater(a.getCallMeLater());
        a.doMyFood();
        // WorkerB가 일을 마치지 않았는데 메인(main) 스레드가 종료되는 경우 어플리케이션이 종료되므로 이런 현상을 방지하는 코드 추가
        joinPoint.join();
        System.out.println("All Chef done.");
    }
}
